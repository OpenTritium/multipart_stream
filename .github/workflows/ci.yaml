name: Rust CI

on:
  push:
    branches: [ "master" ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check_and_format:
    name: Check & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2
      
      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    # 确保基础检查通过后才运行
    needs: check_and_format
    strategy:
      # 如果一个任务失败，不取消其他任务
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        toolchain: [stable, nightly]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        run: cargo test --all-features

  fuzz:
    runs-on: ubuntu-latest
    needs: test
    env:
      # The number of seconds to run the fuzz target. 300 seconds = 5 minutes.
      FUZZ_TIME: 300

    strategy:
      matrix:
        include:
          - fuzz_target: parse_stream

    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: clippy, rustfmt
    - name: Install cargo fuzz
      run: cargo install cargo-fuzz
    - uses: Swatinem/rust-cache@v2
    - name: Build fuzz target
      run: cargo fuzz build ${{ matrix.fuzz_target }}
    - name: Run fuzz target
      run: cargo fuzz run ${{ matrix.fuzz_target }} -- -max_total_time=${{ env.FUZZ_TIME }}
    # Upload fuzzing artifacts on failure for post-mortem debugging.
    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: fuzzing-artifacts-${{ matrix.fuzz_target }}-${{ github.sha }}
        path: fuzz/artifacts

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [check_and_format, test, fuzz]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Verify crate
        run: cargo verify-project --version ${{ github.ref_name }}

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
